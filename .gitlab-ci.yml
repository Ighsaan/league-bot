image: docker:latest

services:
    - docker:dind

stages:
    - build
#    - test
    - release
    - deploy

variables:
#    POSTGRES_DB: postgres
#    POSTGRES_USER: postgres
    CONTAINER_IMAGE: registry.gitlab.com/nifaio/league-bot
    CONTAINER_TEST_IMAGE: $CONTAINER_IMAGE:$CI_BUILD_REF_NAME

# connect:
#   image: postgres:latest
#   script:
#   # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
#   # - export PGPASSWORD=$POSTGRES_PASSWORD
#   - psql -h "db" -U "$POSTGRES_USER" -d "$POSTGRES_DB"


build:
  stage: build
  tags:
    - docker
  script:
    #- export DATABASE_URL=postgres://bocfmfirkwjxgk:672ed20c4a00f87e3f2f09bcf9f3bef3d2dccda79271600def18372841626aab@ec2-23-23-216-40.compute-1.amazonaws.com:5432/d53sba1j98cgj3
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

release_stg:
  stage: release
  tags:
    - docker
  only:
    - master
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_IMAGE:staging
    - docker push $CONTAINER_IMAGE:staging

deploy_stg:
  stage: deploy
  tags:
    - docker
  only:
    - master
  script:
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker pull $CONTAINER_IMAGE:staging
    - docker tag $CONTAINER_IMAGE:staging registry.heroku.com/league-discord-bot-staging/web
    - docker push registry.heroku.com/league-discord-bot-staging/web
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app league-discord-bot-staging
