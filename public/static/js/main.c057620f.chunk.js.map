{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","response","ranking","post","responseToPost","callApi","_callee","body","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","handleSubmit","_callee2","e","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","_this","text","setState","_this2","this","then","res","catch","err","console","log","react_default","createElement","className","map","rank","index","discordid","points","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRA6DeA,oNA1DbC,MAAQ,CACNC,SAAU,CAACC,QAAS,IACpBC,KAAM,GACNC,eAAgB,MAQlBC,6BAAU,SAAAC,IAAA,IAAAL,EAAAM,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACeC,MAAM,oBADrB,cACFb,EADEU,EAAAI,KAAAJ,EAAAE,KAAA,EAEWZ,EAASe,OAFpB,UAEFT,EAFEI,EAAAI,KAGgB,MAApBd,EAASgB,OAHL,CAAAN,EAAAE,KAAA,cAG2BK,MAAMX,EAAKY,SAHtC,cAAAR,EAAAS,OAAA,SAIDb,GAJC,wBAAAI,EAAAU,SAAAf,QAOVgB,mDAAe,SAAAC,EAAMC,GAAN,IAAAvB,EAAAM,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cACbW,EAAEE,iBADWD,EAAAZ,KAAA,EAEUC,MAAM,aAAc,CACzCa,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBtB,KAAMuB,KAAKC,UAAU,CAAE5B,KAAM6B,EAAKhC,MAAMG,SAP7B,cAEPF,EAFOwB,EAAAV,KAAAU,EAAAZ,KAAA,EASMZ,EAASgC,OATf,OASP1B,EATOkB,EAAAV,KAUbiB,EAAKE,SAAS,CAAE9B,eAAgBG,IAVnB,wBAAAkB,EAAAJ,SAAAE,+IAbK,IAAAY,EAAAC,KAClBA,KAAK/B,UACFgC,KAAK,SAAAC,GAAG,OAAIH,EAAKD,SAAS,CAAEjC,SAAUqC,MACtCC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAwB5B,OACEG,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,OACbF,EAAAlC,EAAAmC,cAAA,UAAQC,UAAU,cAChBF,EAAAlC,EAAAmC,cAAA,8BAGFD,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,UACbF,EAAAlC,EAAAmC,cAAA,aACED,EAAAlC,EAAAmC,cAAA,UACED,EAAAlC,EAAAmC,cAAA,iBACAD,EAAAlC,EAAAmC,cAAA,oBACAD,EAAAlC,EAAAmC,cAAA,uBAEDR,KAAKpC,MAAMC,SAASC,QAAQ4C,IAAI,SAACC,EAAMC,GAAP,OAC/BL,EAAAlC,EAAAmC,cAAA,UACED,EAAAlC,EAAAmC,cAAA,UAAKI,EAAM,GACXL,EAAAlC,EAAAmC,cAAA,UAAKG,EAAKE,WACVN,EAAAlC,EAAAmC,cAAA,UAAKG,EAAKG,qBAlDRC,cCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAlC,EAAAmC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.c057620f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './css/App.css';\r\nclass App extends Component {\r\n  state = {\r\n    response: {ranking: []},\r\n    post: '',\r\n    responseToPost: '',\r\n  };\r\n  componentDidMount() {\r\n    this.callApi()\r\n      .then(res => this.setState({ response: res }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  callApi = async () => {\r\n    const response = await fetch('/api/LeaderBoard');\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n    return body;\r\n  };\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const response = await fetch('/api/world', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ post: this.state.post }),\r\n    });\r\n    const body = await response.text();\r\n    this.setState({ responseToPost: body });\r\n  };\r\n\r\nrender() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p> SA Open League </p>\r\n        </header>\r\n\r\n        <div className=\"Center\">\r\n          <table>\r\n            <tr>\r\n              <th> # </th>\r\n              <th> Name </th>\r\n              <th> Points </th>\r\n            </tr>\r\n            {this.state.response.ranking.map((rank, index) =>\r\n              <tr>\r\n                <td>{index+1}</td>\r\n                <td>{rank.discordid}</td>\r\n                <td>{rank.points}</td>\r\n              </tr>\r\n            )}\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}