{"version":3,"sources":["Leaderboard/LeaderboardHeader.js","Leaderboard/ColumnHeader.js","Leaderboard/UserData.js","Leaderboard/Leaderboard.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["LeaderboardHeader","react_default","a","createElement","className","Component","ColumnHeader","UserData","this","props","rank","name","points","Leaderboard","state","response","ranking","load","type","match","params","_this","callApi","then","res","console","log","setState","catch","err","_callee","body","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","status","Error","message","abrupt","stop","Leaderboard_LeaderboardHeader","Leaderboard_ColumnHeader","map","index","Leaderboard_UserData","key","discordid","Navbar","react_router_dom","to","App","src","src_Navbar","react_router","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c26e7c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass LeaderboardHeader extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"leadheader\">\r\n          <h2>Leaderboard</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeaderboardHeader;\r\n","import React, { Component } from 'react';\r\n\r\nclass ColumnHeader extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row colheader\">\r\n        <div className=\"col-xs-4\">\r\n          <h4>#</h4>\r\n        </div>\r\n        <div className=\"col-xs-4\">\r\n          <h4>Name</h4>\r\n        </div>\r\n        <div className=\"col-xs-4 recent\">\r\n          <h4>Points</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColumnHeader;\r\n","import React, { Component } from 'react';\r\n\r\nclass UserData extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row users\">\r\n        <div className=\"col-xs-4 rank\">\r\n          <h4>{ this.props.rank }</h4>\r\n        </div>\r\n        <div className=\"col-xs-4\">\r\n          <h4>{ this.props.name }</h4>\r\n        </div>\r\n      <div className=\"col-xs-4\">\r\n          <h4>{ this.props.points }</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserData;\r\n","import React, { Component } from 'react';\r\nimport LeaderboardHeader from './LeaderboardHeader.js';\r\nimport ColumnHeader from './ColumnHeader.js';\r\nimport User from './UserData.js';\r\n\r\nclass Leaderboard extends Component {\r\n    state = {\r\n        response: {ranking: []}\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.load(this.props);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.load(props);\r\n    }\r\n\r\n    load = (props) => {\r\n        var type = props.match.params.type;\r\n        this.callApi(type)\r\n        .then(res => {\r\n            console.log(res);\r\n            this.setState({ response: res });\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    callApi = async (type) => {\r\n        const response = await fetch(`/api/LeaderBoard/${type}`);\r\n        const body = await response.json();\r\n        if (response.status !== 200) throw Error(body.message);\r\n        return body;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"leaderboard\">\r\n            <LeaderboardHeader />\r\n            <ColumnHeader />\r\n            {this.state.response.ranking.map((rank, index) =>\r\n            <User key={index+1} rank={index+1} name={rank.discordid} points={rank.points} />\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n    }\r\nexport default Leaderboard;\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <div className=\"col-xs-3\">\r\n          <Link to=\"/solo\">SOLO</Link>\r\n        </div>\r\n        <div className=\"col-xs-1\">\r\n          |\r\n        </div>\r\n        <div className=\"col-xs-4\">\r\n        <Link to=\"/duo\">DUO</Link>\r\n        </div>\r\n        <div className=\"col-xs-1\">\r\n          |\r\n        </div>\r\n        <div className=\"col-xs-3\">\r\n        <Link to=\"/squad\">SQUADS</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport Leaderboard from './Leaderboard/Leaderboard.js';\r\nimport Navbar from './Navbar.js';\r\n\r\nimport './css/App.scss';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n      return (\r\n        <Router>\r\n          <div>\r\n            <img src=\"logo.png\" className=\"logo\" />\r\n            <Navbar />\r\n            <Route path=\"/:type(solo|duo|squad)\" component={Leaderboard} />\r\n          </div>\r\n        </Router>\r\n      );\r\n    }\r\n  }\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}